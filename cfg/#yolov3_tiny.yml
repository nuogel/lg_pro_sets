BELONGS: OBD

PATH:
  TMP_PATH: 'E://LG//programs//lg_pro_sets//tmp//'
  DATA_PATH: 'E://datasets//kitti//'
  IMG_PATH: 'E://datasets//kitti//training//image_2//'
  LAB_PATH: 'E://datasets//kitti//training//label_2//'
  CLASSES_PATH: 'E://LG//programs//lg_pro_sets//cfg//class_names.txt'
  PARAMETER_PATH: 'E://LG//programs//lg_pro_sets//tmp//checkpoint//checkpoint.parameter'
  TEST_WEIGHT_PATH: 'tmp/checkpoint/yolo_tiny_squeezenet_kitti25.pkl'
  GENERATE_LABEL_SAVE_PATH: 'tmp/generated_labels/'

TRAIN:
  MODEL: yolov3_tiny_squeezenet # yolov3_tiny_mobilenet   yolov3_tiny  yolov3_tiny_squeezenet  yolov3_tiny_shufflenet
  EPOCH_SIZE: 400
  BATCH_SIZE: 1
  BATCH_BACKWARD_SIZE: 2  # BATCH_BACKWARD_SIZE: add the last 2 batch's loss, then backward once.

  # loss parameters
  #  ANCHOR_NUM: 12
  #  CLS_NUM: 4
  CLASSES: ['Car','Pedestrian']   #['Car', 'Van', 'Truck', 'Pedestrian', 'Person_sitting', 'Cyclist', 'Tram', 'Misc', 'DontCare']
  STRIDES: [8, 16, 32, 64, 128]
  #  MILABSIZE: [0, 64, 128, 256, 512, 10000000] # this can be replaced by max(size)/16*2^n-->n [0, 1, 2, 3, 4, INF]

  # data aug:
  DO_AUG: FALSE
  RESIZE: TRUE  # resize to IMG_SIZE,or the data_aug will resize to the last pic's size of one batch.
  RELATIVE_LABELS: TRUE  # generate a relative labels to 0-1
  AREAR_RATIO: 0.3
  MIN_AREAR: 10 #400
  SHOW_AUG: FALSE

  # optimizer:
  OPTIMIZER: 'adam'
  LR_START: 0.001
  LR_EXPONENTIAL_DECAY_RATE: 0.98
  BETAS_ADAM: 0.9
  LOSSTYPE: 'mse' #'focalloss' #'mse' #
  LR_CONTINUE: None # CONTINUE: change the parameters and continue this training
  EPOCH_CONTINUE: None
  IMG_SIZE: [384, 960] # the size inputted to net.KITTI[370, 1224],GOLDENRIDGE[1080,1920]  【384, 960】 the size of input images(VGA[672, 376]) better to be 2^n---[last_feature_size*2^5
  MULTI_SIZE_RATIO: [1]
  # NMS:
  SCORE_THRESH: 0.7
  IOU_THRESH: 0.5
  # CUDA:
  GPU_NUM: 0
  # debug:
  LOG_FORMAT: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'  # logging format
  ANCHORS:  [[ 0.0240385 , 0.0336538 ],
             [ 0.0552885 , 0.0649038 ],
             [ 0.0889423 , 0.1394231 ],
             [ 0.1947115 , 0.1971154 ],
             [ 0.3245192 , 0.4062500 ],
             [ 0.8269231 , 0.7668269 ],]  #yolo_anchors 6
  ANCHOR_FMAP_NUM: 3

TEST:
  TEST_SET_RATIO: 0.1
  # NMS:
  NMS_TYPE: 'SOFT_NMS'
  SOFNMS_THETA: 0.5
  SCORE_THRESH: 0.5
  IOU_THRESH: 0.5
  DO_AUG: FALSE  # keep the raw images.
  RESIZE: TRUE   # resize test images  and put into networks
  SAVE_LABELS: TRUE
  SHOW_IMAGES: FALSE
  SHOW_TIMES: 20000
#  ONEIMGTEST: FALSE
  ONE_TEST: TRUE
  ONE_NAME: ['000000']#['20190412_0132']#['000000']



  #  ANCHORS: [[ 0.30625 , 0.7833333333333333 ],
  #            [ 0.634375 , 0.5439814814814814 ],
  #            [ 0.41562499999999997 , 0.8921296296296296 ],
  #            [ 0.41562499999999997 , 1.175 ],
  #            [ 0.546875 , 1.0226851851851853 ],
  #            [ 0.525 , 1.4361111111111111 ],
  #            [ 1.00625 , 0.9138888888888889 ],
  #            [ 1.53125 , 0.6962962962962963 ],
  #            [ 0.765625 , 1.8495370370370372 ],
  #            [ 0.9624999999999999 , 2.611111111111111 ],
  #            [ 2.05625 , 1.3708333333333333 ],
  #            [ 1.465625 , 3.633796296296296 ],
  #            [ 1.96875 , 5.265740740740741 ],
  #            [ 4.24375 , 2.6546296296296297 ],
  #            [ 3.215625 , 7.9638888888888895 ],
  #            [ 6.3218749999999995 , 12.31574074074074 ]] #anchors = 16

  #  ANCHORS FOR RAW APOLLO:
  #  ANCHORS: [[4.9434993, 1.516986], [2.1259836, 1.6779645], [19.452609, 17.815241],
  #            [3.1458852, 2.4994355], [15.0302664, 2.3736405], [1.2374577, 2.8255595],
  #            [5.5330938, 3.605915], [2.4232311, 0.8086055], [0.3672315, 0.6450615],
  #            [1.3549788, 1.2046775], [0.9085392, 0.726555], [0.772209, 2.031382],
  #            [4.0958478, 9.108235], [0.5070438, 1.26041], [10.0207692, 6.877788],
  #            [1.9708173, 4.677844]]  # anchors = raw_boxes / img_size * feature map size.
#goldenridge 50k k-means ===anchors=16
#[ 0.30625 , 0.7833333333333333 ],
#[ 0.634375 , 0.5439814814814814 ],
#[ 0.41562499999999997 , 0.8921296296296296 ],
#[ 0.41562499999999997 , 1.175 ],
#[ 0.546875 , 1.0226851851851853 ],
#[ 0.525 , 1.4361111111111111 ],
#[ 1.00625 , 0.9138888888888889 ],
#[ 1.53125 , 0.6962962962962963 ],
#[ 0.765625 , 1.8495370370370372 ],
#[ 0.9624999999999999 , 2.611111111111111 ],
#[ 2.05625 , 1.3708333333333333 ],
#[ 1.465625 , 3.633796296296296 ],
#[ 1.96875 , 5.265740740740741 ],
#[ 4.24375 , 2.6546296296296297 ],
#[ 3.215625 , 7.9638888888888895 ],
#[ 6.3218749999999995 , 12.31574074074074 ],

#goldenridge 50k k-means ===anchors=12
#[ 0.371875 , 0.8703703703703703 ],
#[ 0.6125 , 0.5875 ],
#[ 0.459375 , 1.1097222222222223 ],
#[ 0.525 , 1.4361111111111111 ],
#[ 1.1812500000000001 , 0.826851851851852 ],
#[ 0.7875 , 1.8712962962962965 ],
#[ 0.984375 , 2.6546296296296297 ],
#[ 2.45 , 1.5666666666666667 ],
#[ 1.465625 , 3.633796296296296 ],
#[ 1.9906249999999999 , 5.222222222222222 ],
#[ 3.45625 , 7.376388888888889 ],
#[ 6.278125 , 12.424537037037036 ],

##goldenridge 50k k-means ===anchors=9
#[ 0.35 , 0.848611111111111 ],
#[ 0.459375 , 1.0662037037037038 ],
#[ 0.940625 , 0.674537037037037 ],
#[ 0.56875 , 1.5013888888888887 ],
#[ 0.896875 , 2.262962962962963 ],
#[ 1.903125 , 1.262037037037037 ],
#[ 1.640625 , 4.177777777777778 ],
#[ 3.8937500000000003 , 2.502314814814815 ],
#[ 4.003125 , 8.964814814814815 ],

